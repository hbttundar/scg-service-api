#!/bin/bash

# SCG Service CLI Tool
# This script allows running CI tasks locally and provides build utilities

# Variables
PROTO_DIR="proto"
GEN_DIR="gen"
GO_OUT_DIR="${GEN_DIR}/go"

# Tools
PROTOC="protoc"
PROTOC_GEN_GO="protoc-gen-go"
PROTOC_GEN_GO_GRPC="protoc-gen-go-grpc"
GOLANGCI_LINT="golangci-lint"
GOSEC="gosec"
GOVULNCHECK="govulncheck"

# Function to show help message
show_help() {
  echo "Available commands:"
  echo "  all          - Generate all code (default)"
  echo "  proto        - Generate Go code from protobuf definitions"
  echo "  clean        - Clean generated files"
  echo "  lint         - Run linter on the codebase"
  echo "  lint-fix     - Run linter and fix issues automatically when possible"
  echo "  test         - Run tests with coverage"
  echo "  build        - Build the project"
  echo "  security     - Run security checks"
  echo "  verify       - Verify dependencies (download, verify, check if tidy)"
  echo "  ci           - Run all CI features locally (verify, lint/test/security in parallel, build)"
  echo "  install-tools - Install required tools"
  echo "  help         - Show this help message"
}

# Function to generate Go code from protobuf definitions
generate_proto() {
  echo "Generating Go code from protobuf definitions..."
  # Ensure directories exist
  mkdir -p "${GO_OUT_DIR}"

  find "${PROTO_DIR}" -name "*.proto" -exec \
    ${PROTOC} \
    --proto_path=${PROTO_DIR} \
    --go_out=${GEN_DIR} \
    --go_opt=paths=source_relative \
    --go-grpc_out=${GEN_DIR} \
    --go-grpc_opt=paths=source_relative \
    {} \;
  echo "Done."
}

# Function to clean generated files
clean_generated() {
  echo "Cleaning generated files..."
  rm -rf "${GEN_DIR}"
  echo "Done."
}

# Function to install required tools
install_tools() {
  echo "Installing required tools..."
  go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
  go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

  # Install golangci-lint if not already installed
  if ! command -v ${GOLANGCI_LINT} &> /dev/null; then
    echo "Installing golangci-lint..."
    curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
  fi

  echo "Done."
}

# Function to run the linter
run_lint() {
  echo "Running linter..."
  ${GOLANGCI_LINT} run ./...
  echo "Done."
}

# Function to run the linter and fix issues
run_lint_fix() {
  echo "Running linter and fixing issues..."
  ${GOLANGCI_LINT} run --fix ./...
  echo "Done."
}

# Function to run tests with coverage
run_tests() {
  echo "Running tests with coverage..."
  go test -race -coverprofile=coverage.txt -covermode=atomic ./...
  echo "Done."
}

# Function to build the project
build_project() {
  echo "Building the project..."
  go build -v ./...
  echo "Done."
}

# Function to run security checks
run_security_checks() {
  echo "Running security checks..."

  # Check if gosec is installed
  if ! command -v ${GOSEC} &> /dev/null; then
    echo "Installing gosec..."
    go install github.com/securego/gosec/v2/cmd/gosec@latest
  fi

  # Run gosec
  echo "Running Gosec Security Scanner..."
  ${GOSEC} -exclude-dir=gen ./...

  # Check if govulncheck is installed
  if ! command -v ${GOVULNCHECK} &> /dev/null; then
    echo "Installing govulncheck..."
    go install golang.org/x/vuln/cmd/govulncheck@latest
  fi

  # Run govulncheck
  echo "Running govulncheck..."
  ${GOVULNCHECK} ./...

  echo "Done."
}

# Function to verify dependencies
verify_dependencies() {
  echo "Verifying dependencies..."

  # Download dependencies
  echo "Downloading dependencies..."
  go mod download

  # Verify dependencies
  echo "Verifying dependencies..."
  go mod verify

  # Check if modules are tidy
  echo "Checking if modules are tidy..."
  go mod tidy
  if ! git diff --exit-code go.mod go.sum &> /dev/null; then
    echo "Warning: go.mod or go.sum is not tidy. Please run 'go mod tidy' and commit changes."
  else
    echo "Modules are tidy."
  fi

  echo "Done."
}

# Function to run all CI features locally
run_ci() {
  echo "Running all CI features locally..."

  # First verify dependencies
  verify_dependencies

  # Run lint, tests, and security checks in parallel
  echo "Running lint, tests, and security checks in parallel..."
  run_lint &
  LINT_PID=$!

  run_tests &
  TEST_PID=$!

  run_security_checks &
  SECURITY_PID=$!

  # Wait for all parallel tasks to complete
  echo "Waiting for lint to complete..."
  wait $LINT_PID
  LINT_STATUS=$?

  echo "Waiting for tests to complete..."
  wait $TEST_PID
  TEST_STATUS=$?

  echo "Waiting for security checks to complete..."
  wait $SECURITY_PID
  SECURITY_STATUS=$?

  # Build the project after parallel tasks are done
  build_project

  # Check if any of the parallel tasks failed
  if [ $LINT_STATUS -ne 0 ] || [ $TEST_STATUS -ne 0 ] || [ $SECURITY_STATUS -ne 0 ]; then
    echo "CI run completed with errors."
    exit 1
  else
    echo "CI run completed successfully."
  fi
}

# Main execution
case "$1" in
  "proto")
    generate_proto
    ;;
  "clean")
    clean_generated
    ;;
  "lint")
    run_lint
    ;;
  "lint-fix")
    run_lint_fix
    ;;
  "test")
    run_tests
    ;;
  "build")
    build_project
    ;;
  "security")
    run_security_checks
    ;;
  "verify" | "verify-dependencies")
    verify_dependencies
    ;;
  "ci")
    run_ci
    ;;
  "install-tools")
    install_tools
    ;;
  "help")
    show_help
    ;;
  "all" | "")
    generate_proto
    ;;
  *)
    echo "Unknown command: $1"
    show_help
    exit 1
    ;;
esac

exit 0
